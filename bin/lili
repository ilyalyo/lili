#!/usr/bin/env ruby

require 'rubygems'
require 'find'
require 'optparse'
require 'yaml'
require 'lili'

IGNORE_FILENAME = '.lili-ignore'
CONFIGURATION_FILENAME = '.lili-rc.yml'

def main
  ignores = DEFAULT_IGNORES

  filenames = ['.']

  configuration_flags = {}

  option = OptionParser.new do |option|
    option.banner = 'Usage: lili [options] [<files>]'

    option.on('-i', '--ignore pattern', 'Ignore file names matching Ruby regex pattern') do |pattern|
      ignores << pattern
    end

    option.on('-h', '--help', 'Print usage info') do
      puts option
      exit
    end

    option.on('-v', '--version', 'Print version info') do
      puts "lili #{LiLi::VERSION}"
      exit
    end
  end

  option.parse!

  filenames = ARGV unless ARGV.empty?

  recursive_filenames = []

  filenames.each do |f|
    if File.directory? f
      recursive_filenames = recursive_filenames.concat(recursive_list(f, ignores))
    else
      recursive_filenames << f
    end
  end

  configuration_dotfile = DEFAULT_CONFIGURATION

  recursive_filenames.each do |f|
    dir = File.expand_path("..", f)

    parent_of_home = File.expand_path("..", ENV["HOME"])

    while dir != parent_of_home
      ignore_file = dir + File::SEPARATOR + IGNORE_FILENAME

      if File.exist?(ignore_file) then
        ignores.concat(open(ignore_file).read.split("\n"))
      end

      dir = File.expand_path("..", dir)
    end

    if ignores.none? { |ignore| f =~ %r(#{ignore}) } then
      dir = File.expand_path("..", f)

      parent_of_home = File.expand_path("..", ENV["HOME"])

      while dir != parent_of_home
        config_file = dir + File::SEPARATOR + CONFIGURATION_FILENAME

        if File.exist?(config_file) then
          configuration_dotfile = DEFAULT_CONFIGURATION.merge(YAML.load_file(config_file))
          break
        else
          dir = File.expand_path("..", dir)
        end
      end

      # Hack to Reset configuration when changing directories
      configuration_dotfile = DEFAULT_CONFIGURATION unless File.exist?(dir + File::SEPARATOR + CONFIGURATION_FILENAME)

      # Command line flags override dotfile settings
      configuration = configuration_dotfile.merge(configuration_flags)

      check(f, configuration)
    end
  end
end

begin
  main
# User may quit lili before completion.
rescue Interrupt
  nil
# lili may be piped to another program (e.g. `less`),
# which is quit before lili completes.
rescue Errno::EPIPE, Errno::EMFILE
  nil
end
