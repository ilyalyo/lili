#!/usr/bin/env ruby

require 'rubygems'
require 'find'
require 'optparse'
require 'dotsmack'
require 'yaml'
require 'lili'

def main
  ignores = DEFAULT_IGNORES

  configuration_flags = {}

  option = OptionParser.new do |option|
    option.banner = 'Usage: lili [options] [<files>]'

    option.on('-i', '--ignore pattern', 'Ignore file pattern (fnmatch)') do |pattern|
      ignores << pattern
    end

    option.on('-h', '--help', 'Print usage info') do
      puts option
      exit
    end

    option.on('-v', '--version', 'Print version info') do
      puts "lili #{LiLi::VERSION}"
      exit
    end
  end

  option.parse!

  filenames =
    if ARGV == []
      ['.']
    else
      ARGV
    end

  dotsmack = Dotsmack::Smacker.new(
    dotignore = '.lili-ignore',
    additional_ignores = ignores,
    dotconfig = '.lili-rc.yml'
  )

  dotsmack.enumerate(filenames).each do |filename, config|
    config =
      if config.nil?
        DEFAULT_CONFIGURATION.merge(configuration_flags)
      else
        DEFAULT_CONFIGURATION.merge(YAML.load(config)).merge(configuration_flags)
      end

    check(filename, config)
  end
end

begin
  main
# User may quit lili before completion.
rescue Interrupt
  nil
# lili may be piped to another program (e.g. `less`),
# which is quit before lili completes.
rescue Errno::EPIPE, Errno::EMFILE
  nil
end
